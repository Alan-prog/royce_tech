swagger: "2.0"
info:
  description: "This is a sample server RoyceTech server."
  version: "1.0.0"
  title: "Swagger Royce Tech"
host: "46.148.227.164:8080"
schemes:
  - "http"
paths:
  /royce/alive:
    get:
      tags:
        - "Alive"
      summary: "Checking the liveness of service"
      description: ""
      operationId: "findPetsByStatus"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AliveResponse"
        "500":
          description: "Service is unavailable"
  /royce/create/user:
    post:
      tags:
        - "CreateUser"
      summary: "Add a new user to the store"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User data that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/CreateUserRequest"
      responses:
        "200":
          description: "Adding was successfull"
          schema:
            $ref: "#/definitions/SingleUser"
        "400":
          description: "Bad date format"
          schema:
            $ref: "#/definitions/ErrMessage"
  /royce/user:
    put:
      tags:
        - "UpdateUserData"
      summary: "Update an existing pet"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Fields that should be changed"
          required: true
          schema:
            $ref: "#/definitions/UpdateRequest"
      responses:
        "200":
          description: "Updating was successfull"
          schema:
            $ref: "#/definitions/SingleUser"
        "400":
          description: "Bad date format"
          schema:
            $ref: "#/definitions/ErrMessage"
    get:
      tags:
        - "GetUserData"
      summary: "Get single user data by user id"
      description: ""
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AliveResponse"
        "500":
          description: "Service is unavailable"

    # delete:
    #   tags:
    #   - "pet"
    #   summary: "Deletes a pet"
    #   description: ""
    #   operationId: "deletePet"
    #   produces:
    #   - "application/xml"
    #   - "application/json"
    #   parameters:
    #   - name: "api_key"
    #     in: "header"
    #     required: false
    #     type: "string"
    #   - name: "petId"
    #     in: "path"
    #     description: "Pet id to delete"
    #     required: true
    #     type: "integer"
    #     format: "int64"
    #   responses:
    #     "400":
    #       description: "Invalid ID supplied"
    #     "404":
    #       description: "Pet not found"



definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
          - "placed"
          - "approved"
          - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Pet:
    type: "object"
    required:
      - "name"
      - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
          - "available"
          - "pending"
          - "sold"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
  AliveResponse:
    type: "object"
    properties:
      text:
        type: "string"
        description: "pet status in the store"
  CreateUserRequest:
    type: "object"
    properties:
      name:
        type: "string"
      dob:
        type: "string"
      address:
        type: "string"
      description:
        type: "string"
  SingleUser:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      dob:
        type: "string"
      address:
        type: "string"
      description:
        type: "string"
      createAt:
        type: "string"
      updatedAt:
        type: "string"
  ErrMessage:
    type: "object"
    properties:
      err:
        type: "string"
      humanText:
        type: "string"
      code:
        type: "integer"
        format: "int32"

  # {
  # 	"id":1,
  # 	"name":"Anna",
  # 	"dob":"1998-08-10",
  # 	"address":"Novocherkasskaya 47k2",
  # 	"description":"Bad girl"
  # }
  UpdateRequest:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      dob:
        type: "string"
      address:
        type: "string"
      description:
        type: "string"

externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"